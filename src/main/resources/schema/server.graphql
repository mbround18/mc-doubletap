# Setup

schema {
  query: QueryType
  mutation: MutationType
}

type QueryType {
  offlinePlayer(name: String!): OfflinePlayer
  player(name: String!): Player
  server: Server
  whitelist: WhitelistQuery
  world(name: String = "world"): World
}

type MutationType {
  whitelist: WhitelistMutation
  player: PlayerMutations
}

# Query Types
type WhitelistQuery {
  players: [OfflinePlayer!]
}

type World {
  allowAnimals: Boolean!
  name: String!
}

type Location {
  x: Int!
  y: Int!
  z: Int!
}

type OfflinePlayer {
  bedSpawnLocation: Location
  isBanned: Boolean
  isOnline: Boolean
  isWhitelisted: Boolean
  lastPlayed: Float
  lastSeen: Float
  name: String!
  player: Player
  uniqueId: ID!
}

type Player {
  address: ID!
  affectsSpawning: Boolean!
  allowFlight: Boolean!
  bedSpawnLocation: Location
  clientViewDIstance: Int!
  compassTarget: Location
  exhaustion: Float!
  exp: Float!
  flySpeed: Float!
  foodLevel: Int!
  hasResourcePack: Boolean!
  health: Float!
  maxHealth: Float!
  healthScale: Float!
  isBanned: Boolean!
  isFlying: Boolean!
  isOnline: Boolean!
  isWhitelisted: Boolean!
  locale: String!
  location: Location!
  level: Float!
  name: String!
  playTime: Float
  timeOffset: Float!
  gamemode: String
}

type Server {
  allowEnd: Boolean!
  allowFlight: Boolean!
  allowNether: Boolean!
  ambientSpawnLimit: Int!
  animalSpawnLimit: Int!
  averageTickTime: Float!
  """
  BanList    getBanListâ(BanList.Type type)
  Set<OfflinePlayer>    getBannedPlayers()
  """
  bukkitVersion: String!
  " Get the current internal server tick"
  currentTick: Int!
  """
  GameMode    getDefaultGameMode()
  Entity    getEntityâ(UUID uuid)
  """
  generateStructures: Boolean!
  hasWhitelist: Boolean!
  "    HelpMap	getHelpMap()"
  idleTimeout: Int!
  ip: String!
  """
  Set<String>    getIPBans()
  ItemFactory    getItemFactory()
  Logger    getLogger()
  LootTable    getLootTableâ(NamespacedKey key)
  """
  maxPlayers: Int!
  maxWorldSize: Int!
  "    Messenger	getMessenger()"
  minecraftVersion: String!
  "    MobGoals	getMobGoals()"
  monsterSpawnLimit: Int!
  motd: String!
  name: String!

  "Returns a list of players who have joined the server."
  getOfflinePlayers: [OfflinePlayer!]

  "Whether or not the server is online"
  onlineMode: Boolean!

  ""
  onlinePlayers: [Player!]
  getOperators: [OfflinePlayer!]
  permissionMessage: String!
  """
  PluginCommand    getPluginCommandâ(String name)
  PluginManager    getPluginManager()
  """
  port: Int!
  """
  Recipe    getRecipeâ(NamespacedKey recipeKey)
  List<Recipe>    getRecipesForâ(ItemStack result)
  ScoreboardManager    getScoreboardManager()
  CachedServerIcon    getServerIcon()
  ServicesManager    getServicesManager()
  """
  shutdownMessage: String!
  spawnRadius: Int!
  """
  Tag<T>    getTagâ(String registry, NamespacedKey tag, Class<T> clazz)
  Iterable<Tag<T>>    getTagsâ(String registry, Class<T> clazz)
  """
  ticksPerAmbientSpawns: Int!
  ticksPerAnimalSpawns: Int!
  ticksPerMonsterSpawns: Int!
  ticksPerWaterAmbientSpawns: Int!
  ticksPerWaterSpawns: Int!
  """
  long[]    getTickTimes()
  """
  getTPS: [Int]
  updateFolder: String!
  "    File	getUpdateFolderFile()"
  version: String!
  viewDistance: Int!
  "    Warning.WarningState	getWarningState()"
  waterAmbientSpawnLimit: Int!
  waterAnimalSpawnLimit: Int!

  world(name: String = "world"): World!
  worldType: String!
  worlds: [World!]
}

# Mutations Types

type WhitelistMutation {
  status(status: Boolean!): Server!
  add(name: String!): OfflinePlayer
  remove(name: String!): OfflinePlayer
}

type PlayerMutations {
  ban(name: String!, reason: String!): Player
  kick(name: String!, reason: String!): Player
  setLevel(name: String!, level: Int!): Player
  setHealth(name: String!, health: Int!): Player
  setGameMode(name: String!, gamemode: String!): Player
  setFoodLevel(name: String!, foodLevel: Int!): Player
}
